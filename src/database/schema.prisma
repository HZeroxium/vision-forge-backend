// database/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VideoStatus {
  DRAFT
  PROCESSING
  COMPLETED
  PUBLISHED
}

enum TTSProvider {
  GOOGLE_TTS
  OPENAI
}

enum PublishPlatform {
  YOUTUBE
  TIKTOK
  FACEBOOK
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  name                 String?
  role                 Role      @default(USER)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?

  // Relations
  scripts Script[]
  videos  Video[]
  images  Image[]
  audios  Audio[]
}

model Script {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  content   String // Script content generated by AI
  style     String // e.g., "casual", "formal", etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Optional one-to-one relation to a generated video asset
  video Video?
  Audio Audio[]
}

model Video {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  // Relation to the script that generated this video (if any)
  script       Script?     @relation(fields: [scriptId], references: [id])
  scriptId     String?     @unique
  status       VideoStatus
  url          String? // Completed video URL (generalized)
  thumbnailUrl String? // Thumbnail URL
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?

  // One-to-many relations with Images, Audios, VideoGenerationJobs and PublishingHistory
  images              Image[]
  audios              Audio[]
  publishingHistories PublishingHistory[]
}

/// Separate model for generated images.
model Image {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  // Optionally, an image can be associated with a video.
  video     Video?    @relation(fields: [videoId], references: [id])
  videoId   String?
  prompt    String // Prompt used to generate this image.
  style     String // Visual style.
  url       String // Image URL (generalized)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

/// Separate model for generated audio.
model Audio {
  id              String               @id @default(uuid())
  user            User                 @relation(fields: [userId], references: [id])
  userId          String
  // Optionally, an audio can be associated with a script and/or video.
  script          Script?              @relation(fields: [scriptId], references: [id])
  scriptId        String?
  video           Video?               @relation(fields: [videoId], references: [id])
  videoId         String?
  provider        TTSProvider
  voiceParams     Json // Configuration such as voice, speed, pitch.
  url             String // Audio URL (generalized)
  durationSeconds Int
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
}


/// Model for storing publishing history of videos to external platforms.
model PublishingHistory {
  id              String          @id @default(uuid())
  video           Video           @relation(fields: [videoId], references: [id])
  videoId         String
  platform        PublishPlatform
  platformVideoId String // ID or link in the external platform.
  publishStatus   String // For example: "success", "failed".
  publishLogs     Json // Logs, error codes, responses from the platform.
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}
